import { useState } from "react";
// @mui/material components
import { makeStyles } from "@mui/styles";
import InputAdornment from "@mui/material/InputAdornment";
import Icon from "@mui/material/Icon";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
// @mui/icons-material
import Email from "@mui/icons-material/Email";
import People from "@mui/icons-material/People";
// core components
import Header from "components/Header/Header.js";
import HeaderLinks from "components/Header/HeaderLinks.js";
import Footer from "components/Footer/Footer.js";
import GridContainer from "components/Grid/GridContainer.js";
import GridItem from "components/Grid/GridItem.js";
import Button from "components/CustomButtons/Button.js";
import Card from "components/Card/Card.js";
import CardBody from "components/Card/CardBody.js";
import CardHeader from "components/Card/CardHeader.js";
import CardFooter from "components/Card/CardFooter.js";
import CustomInput from "components/CustomInput/CustomInput.js";

import styles from "styles/jss/nextjs-material-kit/pages/loginPage.js";

const useStyles = makeStyles(styles);

export async function getServerSideProps(ctx) {
  return {
    props: {},
  };
}

export default function LoginPage(props) {
  const [cardAnimaton, setCardAnimation] = useState("cardHidden");
  setTimeout(function () {
    setCardAnimation("");
  }, 700);
  const classes = useStyles();
  const { ...rest } = props;

  const isWebAuthnAvailability = () => {
    if (!window.PublicKeyCredential) {
      console.error("webauthn not available");
    }
  };

  const webAuthn = () => {
    var publicKey = {
      // The challenge is produced by the server; see the Security Considerations
      challenge: new Uint8Array([
        21, 31, 105 /* 29 more random bytes generated by the server */,
      ]),

      // Relying Party:
      rp: {
        name: "ACME Corporation",
      },

      // User:
      user: {
        id: Uint8Array.from(
          window.atob("MIIBkzCCATigAwIBAjCCAZMwggE4oAMCAQIwggGTMII="),
          (c) => c.charCodeAt(0)
        ),
        name: "alex.mueller@example.com",
        displayName: "Alex Müller",
      },

      // This Relying Party will accept either an ES256 or RS256 credential, but
      // prefers an ES256 credential.
      pubKeyCredParams: [
        {
          type: "public-key",
          alg: -7, // "ES256" as registered in the IANA COSE Algorithms registry
        },
        {
          type: "public-key",
          alg: -257, // Value registered by this specification for "RS256"
        },
      ],

      authenticatorSelection: {
        // Try to use UV if possible. This is also the default.
        userVerification: "preferred",
      },

      timeout: 360000, // 6 minutes
      excludeCredentials: [
        // Don’t re-register any authenticator that has one of these credentials
        {
          id: Uint8Array.from(
            window.atob("ufJWp8YGlibm1Kd9XQBWN1WAw2jy5In2Xhon9HAqcXE="),
            (c) => c.charCodeAt(0)
          ),
          type: "public-key",
        },
        {
          id: Uint8Array.from(
            window.atob("E/e1dhZc++mIsz4f9hb6NifAzJpF1V4mEtRlIPBiWdY="),
            (c) => c.charCodeAt(0)
          ),
          type: "public-key",
        },
      ],

      // Make excludeCredentials check backwards compatible with credentials registered with U2F
      extensions: { appidExclude: "https://acme.example.com" },
    };

    // Note: The following call will cause the authenticator to display UI.
    navigator.credentials
      .create({ publicKey })
      .then(function (newCredentialInfo) {
        // Send new credential info to server for verification and registration.
      })
      .catch(function (err) {
        // No acceptable authenticator or user refused consent. Handle appropriately.
      });
  };

  return (
    <div>
      <Header
        brand="auth-playground"
        absolute
        color="transparent"
        rightLinks={
          <List
            className={classes.list}
            sx={{ display: { lg: "flex", md: "flex" } }}>
            <ListItem className={classes.listItem}>
              <Button
                href="/components"
                className={classes.navLink}
                color="transparent">
                Discover
              </Button>
            </ListItem>
            <ListItem className={classes.listItem}>
              <Button
                href="#pablo"
                className={classes.navLink}
                onClick={(e) => e.preventDefault()}
                color="transparent">
                Wishlist
              </Button>
            </ListItem>
            <ListItem className={classes.listItem}>
              <Button
                href="#pablo"
                className={classes.registerNavLink}
                onClick={(e) => e.preventDefault()}
                color="rose"
                round>
                Register
              </Button>
            </ListItem>
          </List>
        }
      />
      <div
        className={classes.pageHeader}
        style={{
          backgroundImage: "url('/img/bg7.jpg')",
          backgroundSize: "cover",
          backgroundPosition: "top center",
        }}>
        <div className={classes.container}>
          <GridContainer justify="center">
            <GridItem xs={12}>
              <Card className={classes[cardAnimaton]}>
                <form className={classes.form}>
                  <CardHeader
                    color="primary"
                    className={classes.cardHeader}>
                    <h4>Login</h4>
                  </CardHeader>
                  <p className={classes.divider}>Or Be Classical</p>
                  <CardBody>
                    <CustomInput
                      labelText="Email..."
                      id="email"
                      formControlProps={{
                        fullWidth: true,
                      }}
                      inputProps={{
                        type: "email",
                        endAdornment: (
                          <InputAdornment position="end">
                            <Email className={classes.inputIconsColor} />
                          </InputAdornment>
                        ),
                      }}
                    />
                    <CustomInput
                      labelText="Password"
                      id="pass"
                      formControlProps={{
                        fullWidth: true,
                      }}
                      inputProps={{
                        type: "password",
                        endAdornment: (
                          <InputAdornment position="end">
                            <Icon className={classes.inputIconsColor}>
                              lock_outline
                            </Icon>
                          </InputAdornment>
                        ),
                        autoComplete: "off",
                      }}
                    />
                  </CardBody>
                  <CardFooter className={classes.cardFooter}>
                    <Button
                      simple
                      color="primary"
                      size="lg">
                      Get started
                    </Button>
                  </CardFooter>
                </form>
              </Card>
            </GridItem>
          </GridContainer>
        </div>
        <Footer whiteFont />
      </div>
    </div>
  );
}
